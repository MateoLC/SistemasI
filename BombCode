bool digitocorrecto(char *contrasenacorrecta, char *contrasenasingresasa)
{
  int digito = 0;
  
  for (int i = 0; i < 6; i++) {
    if (contrasenacorrecta[i] == contrasenasingresasa[i])
    {
      digito = digito + 1;
    }
  }
  if (digito == 6)
  {
    return true;
  }
  else
  {
    return false;
  }
}

void setup() {
  Serial.begin(115200);
}

void configuracion() {

  
  static bool taskI = false;
  static const uint32_t intervalo = 500;
  static uint32_t previousMillis = 0;
  static uint8_t ledState = LOW;
  static const uint8_t ledPin =  3;
  
  
  if (taskI == false) {
    pinMode(ledPin, OUTPUT);
    taskI = true;
  }
  
  uint32_t currentMillis = millis();
  
  if ( (currentMillis - previousMillis) >= intervalo) {
    previousMillis = currentMillis;
    if (ledState == LOW) {
      ledState = HIGH;
    } else {
      ledState = LOW;
    }
    digitalWrite(ledPin, ledState);
  }
}
void bomba() {
  
  static char correcta[6] = {'d', 'u', 'd', 'd', 'u', 'a'};
  static unsigned long previousMillis = 0;
  static unsigned long intervaloo = 1000;
  static int state = 1;
  static char ingresada[6];
  static int contador = 0;

  static int regresiva = 20;
  unsigned long currentMillis = millis();


  switch (state) {
    case 1: {
        if (Serial.available() > 0)
        {
          char letra = Serial.read();
          if ((char)letra == 'd' && regresiva <= 10)
          {
            regresiva--;
            Serial.println(regresiva);
          }
          else if ((char)letra == 'u' && regresiva <= 60)
          {
            regresiva++;
            Serial.println(regresiva);
          }
          else if ((char)letra == 'a')
          {
            state = 2;
            previousMillis = millis();
            contador = 0;

          }
        }

        break;
      }
    case 2: {
        if (Serial.available() > 0) {
          ingresada[contador] = Serial.read();

          
          contador = contador + 1;
          if (contador == 6) {
            if (digitocorrecto(correcta, ingresada))
            {
              state = 1;
              regresiva = 20;
              Serial.println("Bomba detenida");
            }
            contador = 0;
          }
        }
        if ( (millis() - previousMillis) >= intervaloo)
        {
          previousMillis = millis();
          if (regresiva > 0)
          {
            Serial.println(regresiva);
            regresiva = regresiva - 1;
          }
          else
          {
            state = 1;
            regresiva = 20;
            Serial.println("Bomba explota");
          }
        }

        break;
      }
    default:
      Serial.println("Error");
      break;
  }
}
void loop() {
  configuracion();
  bomba();
  
}
